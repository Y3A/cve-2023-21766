#pragma once

typedef PVOID PIO_APC_ROUTINE;

typedef struct _IO_STATUS_BLOCK
{
    union
    {
        NTSTATUS Status;
        PVOID    Pointer;
    };
    ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

typedef NTSYSCALLAPI NTSTATUS (*_NtFsControlFile) (
    HANDLE           FileHandle,
    HANDLE           Event,
    PIO_APC_ROUTINE  ApcRoutine,
    PVOID            ApcContext,
    PIO_STATUS_BLOCK IoStatusBlock,
    ULONG            FsControlCode,
    PVOID            InputBuffer,
    ULONG            InputBufferLength,
    PVOID            OutputBuffer,
    ULONG            OutputBufferLength
);

typedef struct _CTX
{
    HANDLE          volume;
    const WCHAR *path;
} CTX, *PCTX;

#define NT_SUCCESS(Status) ((NTSTATUS)(Status) >= 0)
#define err(msg, status) (printf("[-] %s : 0x%08X\n", msg, status))
#define log(msg) (printf("[+] %s\n", msg))
#define zalloc(x) (HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, x))
#define zfree(x)  (HeapFree(GetProcessHeap(), 0, x))

#define EXP_VOL          L"\\??\\F:"
#define INITIAL_PATH     L"\\??\\C:\\Users\\User\\Desktop\\"
#define EXP_WIMFILE      L"mywim.wim"

static BOOL ResolveSymbols(void);
static NTSTATUS AddOverlay(HANDLE hVolume, LPCWSTR wimPath, PLARGE_INTEGER dataSrc);
static NTSTATUS RemoveOverlay(HANDLE hVolume, ULONG64 dataSrcId);
static NTSTATUS EnumOverlay(HANDLE hVolume, WIM_PROVIDER_OVERLAY_ENTRY *outBuf, ULONG outSize);
static NTSTATUS UpdateOverlay(HANDLE hVolume, ULONG64 dataSrcId, LPCSTR wimPath);
static NTSTATUS DismountVolume(HANDLE hVolume);

static void EnumThread(PVOID ctx);
static void AddThread(PVOID ctx);
static void UpdateLoopThread(PVOID ctx);